using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Halak
{
    /// <summary>
    /// Test case from https://github.com/nst/JSONTestSuite
    /// Generate via https://gist.github.com/halak/3f1dba374038f801ac5625c46a2f575a
    /// </summary>
    /// <seealso cref="http://seriot.ch/parsing_json.php"/>
    [TestClass]
    public class TraverseTest
    {
        [DataTestMethod]
        [DataRow("[123.456e-789]", DisplayName = "i_number_double_huge_neg_exp")]
        [DataRow("[0.4e00669999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999969999999006]", DisplayName = "i_number_huge_exp")]
        [DataRow("[-1e+9999]", DisplayName = "i_number_neg_int_huge_exp")]
        [DataRow("[1.5e+9999]", DisplayName = "i_number_pos_double_huge_exp")]
        [DataRow("[-123123e100000]", DisplayName = "i_number_real_neg_overflow")]
        [DataRow("[123123e100000]", DisplayName = "i_number_real_pos_overflow")]
        [DataRow("[123e-10000000]", DisplayName = "i_number_real_underflow")]
        [DataRow("[-123123123123123123123123123123]", DisplayName = "i_number_too_big_neg_int")]
        [DataRow("[100000000000000000000]", DisplayName = "i_number_too_big_pos_int")]
        [DataRow("[-237462374673276894279832749832423479823246327846]", DisplayName = "i_number_very_big_negative_int")]
        [DataRow("{\"\\uDFAA\":0}", DisplayName = "i_object_key_lone_2nd_surrogate")]
        [DataRow("[\"\\uDADA\"]", DisplayName = "i_string_1st_surrogate_but_2nd_missing")]
        [DataRow("[\"\\uD888\\u1234\"]", DisplayName = "i_string_1st_valid_surrogate_2nd_invalid")]
        [DataRow("[\"\\uD800\\n\"]", DisplayName = "i_string_incomplete_surrogate_and_escape_valid")]
        [DataRow("[\"\\uDd1ea\"]", DisplayName = "i_string_incomplete_surrogate_pair")]
        [DataRow("[\"\\uD800\\uD800\\n\"]", DisplayName = "i_string_incomplete_surrogates_escape_valid")]
        [DataRow("[\"\\ud800\"]", DisplayName = "i_string_invalid_lonely_surrogate")]
        [DataRow("[\"\\ud800abc\"]", DisplayName = "i_string_invalid_surrogate")]
        [DataRow("[\"\\uDd1e\\uD834\"]", DisplayName = "i_string_inverted_surrogates_U+1D11E")]
        [DataRow("[\"\\uDFAA\"]", DisplayName = "i_string_lone_second_surrogate")]
        [DataRowisplayName = "i_structure_500_nested_arrays")]
        [DataRow("﻿{}", DisplayName = "i_structure_UTF-8_BOM_empty_object")]
        [DataRow("[1 true]", DisplayName = "n_array_1_true_without_comma")]
        [DataRow("[\"\": 1]", DisplayName = "n_array_colon_instead_of_comma")]
        [DataRow("[\"\"],", DisplayName = "n_array_comma_after_close")]
        [DataRow("[,1]", DisplayName = "n_array_comma_and_number")]
        [DataRow("[1,,2]", DisplayName = "n_array_double_comma")]
        [DataRow("[\"x\",,]", DisplayName = "n_array_double_extra_comma")]
        [DataRow("[\"x\"]]", DisplayName = "n_array_extra_close")]
        [DataRow("[\"\",]", DisplayName = "n_array_extra_comma")]
        [DataRow("[\"x\"", DisplayName = "n_array_incomplete")]
        [DataRow("[x", DisplayName = "n_array_incomplete_invalid_value")]
        [DataRow("[3[4]]", DisplayName = "n_array_inner_array_no_comma")]
        [DataRow("[1:2]", DisplayName = "n_array_items_separated_by_semicolon")]
        [DataRow("[,]", DisplayName = "n_array_just_comma")]
        [DataRow("[-]", DisplayName = "n_array_just_minus")]
        [DataRow("[   , \"\"]", DisplayName = "n_array_missing_value")]
        [DataRow("[\"a\",\n4\n,1,", DisplayName = "n_array_newlines_unclosed")]
        [DataRow("[1,]", DisplayName = "n_array_number_and_comma")]
        [DataRow("[1,,]", DisplayName = "n_array_number_and_several_commas")]
        [DataRow("[\"a\"\\f]", DisplayName = "n_array_spaces_vertical_tab_formfeed")]
        [DataRow("[*]", DisplayName = "n_array_star_inside")]
        [DataRow("[\"\"", DisplayName = "n_array_unclosed")]
        [DataRow("[1,", DisplayName = "n_array_unclosed_trailing_comma")]
        [DataRow("[1,\n1\n,1", DisplayName = "n_array_unclosed_with_new_lines")]
        [DataRow("[{}", DisplayName = "n_array_unclosed_with_object_inside")]
        [DataRow("[fals]", DisplayName = "n_incomplete_false")]
        [DataRow("[nul]", DisplayName = "n_incomplete_null")]
        [DataRow("[tru]", DisplayName = "n_incomplete_true")]
        [DataRow("123 ", DisplayName = "n_multidigit_number_then_00")]
        [DataRow("[++1234]", DisplayName = "n_number_++")]
        [DataRow("[+1]", DisplayName = "n_number_+1")]
        [DataRow("[+Inf]", DisplayName = "n_number_+Inf")]
        [DataRow("[-01]", DisplayName = "n_number_-01")]
        [DataRow("[-1.0.]", DisplayName = "n_number_-1.0.")]
        [DataRow("[-2.]", DisplayName = "n_number_-2.")]
        [DataRow("[-NaN]", DisplayName = "n_number_-NaN")]
        [DataRow("[.-1]", DisplayName = "n_number_.-1")]
        [DataRow("[.2e-3]", DisplayName = "n_number_.2e-3")]
        [DataRow("[0.1.2]", DisplayName = "n_number_0.1.2")]
        [DataRow("[0.3e+]", DisplayName = "n_number_0.3e+")]
        [DataRow("[0.3e]", DisplayName = "n_number_0.3e")]
        [DataRow("[0.e1]", DisplayName = "n_number_0.e1")]
        [DataRow("[0E+]", DisplayName = "n_number_0_capital_E+")]
        [DataRow("[0E]", DisplayName = "n_number_0_capital_E")]
        [DataRow("[0e+]", DisplayName = "n_number_0e+")]
        [DataRow("[0e]", DisplayName = "n_number_0e")]
        [DataRow("[1.0e+]", DisplayName = "n_number_1.0e+")]
        [DataRow("[1.0e-]", DisplayName = "n_number_1.0e-")]
        [DataRow("[1.0e]", DisplayName = "n_number_1.0e")]
        [DataRow("[1 000.0]", DisplayName = "n_number_1_000")]
        [DataRow("[1eE2]", DisplayName = "n_number_1eE2")]
        [DataRow("[2.e+3]", DisplayName = "n_number_2.e+3")]
        [DataRow("[2.e-3]", DisplayName = "n_number_2.e-3")]
        [DataRow("[2.e3]", DisplayName = "n_number_2.e3")]
        [DataRow("[9.e+]", DisplayName = "n_number_9.e+")]
        [DataRow("[1+2]", DisplayName = "n_number_expression")]
        [DataRow("[0x1]", DisplayName = "n_number_hex_1_digit")]
        [DataRow("[0x42]", DisplayName = "n_number_hex_2_digits")]
        [DataRow("[Inf]", DisplayName = "n_number_Inf")]
        [DataRow("[Infinity]", DisplayName = "n_number_infinity")]
        [DataRow("[0e+-1]", DisplayName = "n_number_invalid+-")]
        [DataRow("[-123.123foo]", DisplayName = "n_number_invalid-negative-real")]
        [DataRow("[-Infinity]", DisplayName = "n_number_minus_infinity")]
        [DataRow("[-foo]", DisplayName = "n_number_minus_sign_with_trailing_garbage")]
        [DataRow("[- 1]", DisplayName = "n_number_minus_space_1")]
        [DataRow("[NaN]", DisplayName = "n_number_NaN")]
        [DataRow("[-012]", DisplayName = "n_number_neg_int_starting_with_zero")]
        [DataRow("[-.123]", DisplayName = "n_number_neg_real_without_int_part")]
        [DataRow("[-1x]", DisplayName = "n_number_neg_with_garbage_at_end")]
        [DataRow("[1ea]", DisplayName = "n_number_real_garbage_after_e")]
        [DataRow("[1.]", DisplayName = "n_number_real_without_fractional_part")]
        [DataRow("[.123]", DisplayName = "n_number_starting_with_dot")]
        [DataRow("[１]", DisplayName = "n_number_U+FF11_fullwidth_digit_one")]
        [DataRow("[1.2a-3]", DisplayName = "n_number_with_alpha")]
        [DataRow("[1.8011670033376514H-308]", DisplayName = "n_number_with_alpha_char")]
        [DataRow("[012]", DisplayName = "n_number_with_leading_zero")]
        [DataRow("[\"x\", truth]", DisplayName = "n_object_bad_value")]
        [DataRow("{[: \"x\"}\n", DisplayName = "n_object_bracket_key")]
        [DataRow("{\"x\", null}", DisplayName = "n_object_comma_instead_of_colon")]
        [DataRow("{\"x\"::\"b\"}", DisplayName = "n_object_double_colon")]
        [DataRow("{🇨🇭}", DisplayName = "n_object_emoji")]
        [DataRow("{\"a\":\"a\" 123}", DisplayName = "n_object_garbage_at_end")]
        [DataRow("{key: 'value'}", DisplayName = "n_object_key_with_single_quotes")]
        [DataRow("{\"a\" b}", DisplayName = "n_object_missing_colon")]
        [DataRow("{:\"b\"}", DisplayName = "n_object_missing_key")]
        [DataRow("{\"a\" \"b\"}", DisplayName = "n_object_missing_semicolon")]
        [DataRow("{\"a\":", DisplayName = "n_object_missing_value")]
        [DataRow("{\"a\"", DisplayName = "n_object_no-colon")]
        [DataRow("{1:1}", DisplayName = "n_object_non_string_key")]
        [DataRow("{9999E9999:1}", DisplayName = "n_object_non_string_key_but_huge_number_instead")]
        [DataRow("{null:null,null:null}", DisplayName = "n_object_repeated_null_null")]
        [DataRow("{\"id\":0,,,,,}", DisplayName = "n_object_several_trailing_commas")]
        [DataRow("{'a':0}", DisplayName = "n_object_single_quote")]
        [DataRow("{\"id\":0,}", DisplayName = "n_object_trailing_comma")]
        [DataRow("{\"a\":\"b\"}/**/", DisplayName = "n_object_trailing_comment")]
        [DataRow("{\"a\":\"b\"}/**//", DisplayName = "n_object_trailing_comment_open")]
        [DataRow("{\"a\":\"b\"}//", DisplayName = "n_object_trailing_comment_slash_open")]
        [DataRow("{\"a\":\"b\"}/", DisplayName = "n_object_trailing_comment_slash_open_incomplete")]
        [DataRow("{\"a\":\"b\",,\"c\":\"d\"}", DisplayName = "n_object_two_commas_in_a_row")]
        [DataRow("{a: \"b\"}", DisplayName = "n_object_unquoted_key")]
        [DataRow("{\"a\":\"a", DisplayName = "n_object_unterminated-value")]
        [DataRow("{ \"foo\" : \"bar\", \"a\" }", DisplayName = "n_object_with_single_string")]
        [DataRow("{\"a\":\"b\"}#", DisplayName = "n_object_with_trailing_garbage")]
        [DataRow(" ", DisplayName = "n_single_space")]
        [DataRow("[\"\\uD800\\\"]", DisplayName = "n_string_1_surrogate_then_escape")]
        [DataRow("[\"\\uD800\\u\"]", DisplayName = "n_string_1_surrogate_then_escape_u")]
        [DataRow("[\"\\uD800\\u1\"]", DisplayName = "n_string_1_surrogate_then_escape_u1")]
        [DataRow("[\"\\uD800\\u1x\"]", DisplayName = "n_string_1_surrogate_then_escape_u1x")]
        [DataRow("[é]", DisplayName = "n_string_accentuated_char_no_quotes")]
        [DataRow("[\"\\ \"]", DisplayName = "n_string_backslash_00")]
        [DataRow("[\"\\x00\"]", DisplayName = "n_string_escape_x")]
        [DataRow("[\"\\\\\\\"]", DisplayName = "n_string_escaped_backslash_bad")]
        [DataRow("[\"\\ \"]", DisplayName = "n_string_escaped_ctrl_char_tab")]
        [DataRow("[\"\\🌀\"]", DisplayName = "n_string_escaped_emoji")]
        [DataRow("[\"\\\"]", DisplayName = "n_string_incomplete_escape")]
        [DataRow("[\"\\u00A\"]", DisplayName = "n_string_incomplete_escaped_character")]
        [DataRow("[\"\\uD834\\uDd\"]", DisplayName = "n_string_incomplete_surrogate")]
        [DataRow("[\"\\uD800\\uD800\\x\"]", DisplayName = "n_string_incomplete_surrogate_escape_invalid")]
        [DataRow("[\"\\a\"]", DisplayName = "n_string_invalid_backslash_esc")]
        [DataRow("[\"\\uqqqq\"]", DisplayName = "n_string_invalid_unicode_escape")]
        [DataRow("[\\u0020\"asd\"]", DisplayName = "n_string_leading_uescaped_thinspace")]
        [DataRow("[\\n]", DisplayName = "n_string_no_quotes_with_bad_escape")]
        [DataRow("\"", DisplayName = "n_string_single_doublequote")]
        [DataRow("['single quote']", DisplayName = "n_string_single_quote")]
        [DataRow("abc", DisplayName = "n_string_single_string_no_double_quotes")]
        [DataRow("[\"\\", DisplayName = "n_string_start_escape_unclosed")]
        [DataRow("[\"a a\"]", DisplayName = "n_string_unescaped_ctrl_char")]
        [DataRow("[\"new\nline\"]", DisplayName = "n_string_unescaped_newline")]
        [DataRow("[\"   \"]", DisplayName = "n_string_unescaped_tab")]
        [DataRow("\"\\UA66D\"", DisplayName = "n_string_unicode_CapitalU")]
        [DataRow("\"\"x", DisplayName = "n_string_with_trailing_garbage")]
        [DataRow("<.>", DisplayName = "n_structure_angle_bracket_.")]
        [DataRow("[<null>]", DisplayName = "n_structure_angle_bracket_null")]
        [DataRow("[1]x", DisplayName = "n_structure_array_trailing_garbage")]
        [DataRow("[1]]", DisplayName = "n_structure_array_with_extra_array_close")]
        [DataRow("[\"asd]", DisplayName = "n_structure_array_with_unclosed_string")]
        [DataRow("aå", DisplayName = "n_structure_ascii-unicode-identifier")]
        [DataRow("[True]", DisplayName = "n_structure_capitalized_True")]
        [DataRow("1]", DisplayName = "n_structure_close_unopened_array")]
        [DataRow("{\"x\": true,", DisplayName = "n_structure_comma_instead_of_closing_brace")]
        [DataRow("[][]", DisplayName = "n_structure_double_array")]
        [DataRow("]", DisplayName = "n_structure_end_array")]
        [DataRow("[", DisplayName = "n_structure_lone-open-bracket")]
        [DataRow("", DisplayName = "n_structure_no_data")]
        [DataRow("[ ]", DisplayName = "n_structure_null-byte-outside-string")]
        [DataRow("2@", DisplayName = "n_structure_number_with_trailing_garbage")]
        [DataRow("{}}", DisplayName = "n_structure_object_followed_by_closing_object")]
        [DataRow("{\"\":", DisplayName = "n_structure_object_unclosed_no_value")]
        [DataRow("{\"a\":/*comment*/\"b\"}", DisplayName = "n_structure_object_with_comment")]
        [DataRow("{\"a\": true} \"x\"", DisplayName = "n_structure_object_with_trailing_garbage")]
        [DataRow("['", DisplayName = "n_structure_open_array_apostrophe")]
        [DataRow("[,", DisplayName = "n_structure_open_array_comma")]
        [DataRow("[{", DisplayName = "n_structure_open_array_open_object")]
        [DataRow("[\"a", DisplayName = "n_structure_open_array_open_string")]
        [DataRow("[\"a\"", DisplayName = "n_structure_open_array_string")]
        [DataRow("{", DisplayName = "n_structure_open_object")]
        [DataRow("{]", DisplayName = "n_structure_open_object_close_array")]
        [DataRow("{,", DisplayName = "n_structure_open_object_comma")]
        [DataRow("{[", DisplayName = "n_structure_open_object_open_array")]
        [DataRow("{\"a", DisplayName = "n_structure_open_object_open_string")]
        [DataRow("{'a'", DisplayName = "n_structure_open_object_string_with_apostrophes")]
        [DataRow("[\"\\{[\"\\{[\"\\{[\"\\{", DisplayName = "n_structure_open_open")]
        [DataRow("*", DisplayName = "n_structure_single_star")]
        [DataRow("{\"a\":\"b\"}#{}", DisplayName = "n_structure_trailing_#")]
        [DataRow("[⁠]", DisplayName = "n_structure_U+2060_word_joined")]
        [DataRow("[\\u000A\"\"]", DisplayName = "n_structure_uescaped_LF_before_string")]
        [DataRow("[1", DisplayName = "n_structure_unclosed_array")]
        [DataRow("[ false, nul", DisplayName = "n_structure_unclosed_array_partial_null")]
        [DataRow("[ true, fals", DisplayName = "n_structure_unclosed_array_unfinished_false")]
        [DataRow("[ false, tru", DisplayName = "n_structure_unclosed_array_unfinished_true")]
        [DataRow("{\"asd\":\"asd\"", DisplayName = "n_structure_unclosed_object")]
        [DataRow("å", DisplayName = "n_structure_unicode-identifier")]
        [DataRow("﻿", DisplayName = "n_structure_UTF8_BOM_no_data")]
        [DataRow("[]", DisplayName = "n_structure_whitespace_formfeed")]
        [DataRow("[⁠]", DisplayName = "n_structure_whitespace_U+2060_word_joiner")]
        [DataRow("[-9223372036854775808]\n", DisplayName = "number_-9223372036854775808")]
        [DataRow("[-9223372036854775809]\n", DisplayName = "number_-9223372036854775809")]
        [DataRow("[1.0]\n", DisplayName = "number_1.0")]
        [DataRow("[1.000000000000000005]\n", DisplayName = "number_1.000000000000000005")]
        [DataRow("[1000000000000000]\n", DisplayName = "number_1000000000000000")]
        [DataRow("[10000000000000000999]\n", DisplayName = "number_10000000000000000999")]
        [DataRow("[1E-999]\n", DisplayName = "number_1e-999")]
        [DataRow("[1E6]\n", DisplayName = "number_1e6")]
        [DataRow("[9223372036854775807]\n", DisplayName = "number_9223372036854775807")]
        [DataRow("[9223372036854775808]\n", DisplayName = "number_9223372036854775808")]
        [DataRow("{\"é\":\"NFC\",\"é\":\"NFD\"}", DisplayName = "object_key_nfc_nfd")]
        [DataRow("{\"é\":\"NFD\",\"é\":\"NFC\"}", DisplayName = "object_key_nfd_nfc")]
        [DataRow("{\"a\":1,\"a\":2}", DisplayName = "object_same_key_different_values")]
        [DataRow("{\"a\":1,\"a\":1}", DisplayName = "object_same_key_same_value")]
        [DataRow("{\"a\":0, \"a\":-0}\n", DisplayName = "object_same_key_unclear_values")]
        [DataRow("[\"\\uD800\"]", DisplayName = "string_1_escaped_invalid_codepoint")]
        [DataRow("[\"\\uD800\\uD800\"]", DisplayName = "string_2_escaped_invalid_codepoints")]
        [DataRow("[\"\\uD800\\uD800\\uD800\"]", DisplayName = "string_3_escaped_invalid_codepoints")]
        [DataRow("[\"A\\u0000B\"]", DisplayName = "string_with_escaped_NULL")]
        [DataRow("[[]   ]", DisplayName = "y_array_arraysWithSpaces")]
        [DataRow("[\"\"]", DisplayName = "y_array_empty-string")]
        [DataRow("[]", DisplayName = "y_array_empty")]
        [DataRow("[\"a\"]", DisplayName = "y_array_ending_with_newline")]
        [DataRow("[false]", DisplayName = "y_array_false")]
        [DataRow("[null, 1, \"1\", {}]", DisplayName = "y_array_heterogeneous")]
        [DataRow("[null]", DisplayName = "y_array_null")]
        [DataRow("[1\n]", DisplayName = "y_array_with_1_and_newline")]
        [DataRow(" [1]", DisplayName = "y_array_with_leading_space")]
        [DataRow("[1,null,null,null,2]", DisplayName = "y_array_with_several_null")]
        [DataRow("[2] ", DisplayName = "y_array_with_trailing_space")]
        [DataRow("[123e65]", DisplayName = "y_number")]
        [DataRow("[0e+1]", DisplayName = "y_number_0e+1")]
        [DataRow("[0e1]", DisplayName = "y_number_0e1")]
        [DataRow("[ 4]", DisplayName = "y_number_after_space")]
        [DataRow("[-0.000000000000000000000000000000000000000000000000000000000000000000000000000001]\n", DisplayName = "y_number_double_close_to_zero")]
        [DataRow("[20e1]", DisplayName = "y_number_int_with_exp")]
        [DataRow("[-0]", DisplayName = "y_number_minus_zero")]
        [DataRow("[-123]", DisplayName = "y_number_negative_int")]
        [DataRow("[-1]", DisplayName = "y_number_negative_one")]
        [DataRow("[-0]", DisplayName = "y_number_negative_zero")]
        [DataRow("[1E22]", DisplayName = "y_number_real_capital_e")]
        [DataRow("[1E-2]", DisplayName = "y_number_real_capital_e_neg_exp")]
        [DataRow("[1E+2]", DisplayName = "y_number_real_capital_e_pos_exp")]
        [DataRow("[123e45]", DisplayName = "y_number_real_exponent")]
        [DataRow("[123.456e78]", DisplayName = "y_number_real_fraction_exponent")]
        [DataRow("[1e-2]", DisplayName = "y_number_real_neg_exp")]
        [DataRow("[1e+2]", DisplayName = "y_number_real_pos_exponent")]
        [DataRow("[123]", DisplayName = "y_number_simple_int")]
        [DataRow("[123.456789]", DisplayName = "y_number_simple_real")]
        [DataRow("{\"asd\":\"sdf\", \"dfg\":\"fgh\"}", DisplayName = "y_object")]
        [DataRow("{\"asd\":\"sdf\"}", DisplayName = "y_object_basic")]
        [DataRow("{\"a\":\"b\",\"a\":\"c\"}", DisplayName = "y_object_duplicated_key")]
        [DataRow("{\"a\":\"b\",\"a\":\"b\"}", DisplayName = "y_object_duplicated_key_and_value")]
        [DataRow("{}", DisplayName = "y_object_empty")]
        [DataRow("{\"\":0}", DisplayName = "y_object_empty_key")]
        [DataRow("{\"foo\\u0000bar\": 42}", DisplayName = "y_object_escaped_null_in_key")]
        [DataRow("{ \"min\": -1.0e+28, \"max\": 1.0e+28 }", DisplayName = "y_object_extreme_numbers")]
        [DataRow("{\"x\":[{\"id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}], \"id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}", DisplayName = "y_object_long_strings")]
        [DataRow("{\"a\":[]}", DisplayName = "y_object_simple")]
        [DataRow("{\"title\":\"\\u041f\\u043e\\u043b\\u0442\\u043e\\u0440\\u0430 \\u0417\\u0435\\u043c\\u043b\\u0435\\u043a\\u043e\\u043f\\u0430\" }", DisplayName = "y_object_string_unicode")]
        [DataRow("{\n\"a\": \"b\"\n}", DisplayName = "y_object_with_newlines")]
        [DataRow("[\"\\u0060\\u012a\\u12AB\"]", DisplayName = "y_string_1_2_3_bytes_UTF-8_sequences")]
        [DataRow("[\"\\uD801\\udc37\"]", DisplayName = "y_string_accepted_surrogate_pair")]
        [DataRow("[\"\\ud83d\\ude39\\ud83d\\udc8d\"]", DisplayName = "y_string_accepted_surrogate_pairs")]
        [DataRow("[\"\\\"\\\\\\/\\b\\f\\n\\r\\t\"]", DisplayName = "y_string_allowed_escapes")]
        [DataRow("[\"\\\\u0000\"]", DisplayName = "y_string_backslash_and_u_escaped_zero")]
        [DataRow("[\"\\\"\"]", DisplayName = "y_string_backslash_doublequotes")]
        [DataRow("[\"a/*b*/c/*d//e\"]", DisplayName = "y_string_comments")]
        [DataRow("[\"\\\\a\"]", DisplayName = "y_string_double_escape_a")]
        [DataRow("[\"\\\\n\"]", DisplayName = "y_string_double_escape_n")]
        [DataRow("[\"\\u0012\"]", DisplayName = "y_string_escaped_control_character")]
        [DataRow("[\"\\uFFFF\"]", DisplayName = "y_string_escaped_noncharacter")]
        [DataRow("[\"asd\"]", DisplayName = "y_string_in_array")]
        [DataRow("[ \"asd\"]", DisplayName = "y_string_in_array_with_leading_space")]
        [DataRow("[\"\\uDBFF\\uDFFF\"]", DisplayName = "y_string_last_surrogates_1_and_2")]
        [DataRow("[\"new\\u00A0line\"]", DisplayName = "y_string_nbsp_uescaped")]
        [DataRow("[\"􏿿\"]", DisplayName = "y_string_nonCharacterInUTF-8_U+10FFFF")]
        [DataRow("[\"￿\"]", DisplayName = "y_string_nonCharacterInUTF-8_U+FFFF")]
        [DataRow("[\"\\u0000\"]", DisplayName = "y_string_null_escape")]
        [DataRow("[\"\\u002c\"]", DisplayName = "y_string_one-byte-utf-8")]
        [DataRow("[\"π\"]", DisplayName = "y_string_pi")]
        [DataRow("[\"𛿿\"]", DisplayName = "y_string_reservedCharacterInUTF-8_U+1BFFF")]
        [DataRow("[\"asd \"]", DisplayName = "y_string_simple_ascii")]
        [DataRow("\" \"", DisplayName = "y_string_space")]
        [DataRow("[\"\\uD834\\uDd1e\"]", DisplayName = "y_string_surrogates_U+1D11E_MUSICAL_SYMBOL_G_CLEF")]
        [DataRow("[\"\\u0821\"]", DisplayName = "y_string_three-byte-utf-8")]
        [DataRow("[\"\\u0123\"]", DisplayName = "y_string_two-byte-utf-8")]
        [DataRow("[\"\\u2028\"]", DisplayName = "y_string_u+2028_line_sep")]
        [DataRow("[\"\\u2029\"]", DisplayName = "y_string_u+2029_par_sep")]
        [DataRow("[\"\\u0061\\u30af\\u30EA\\u30b9\"]", DisplayName = "y_string_uEscape")]
        [DataRow("[\"new\\u000Aline\"]", DisplayName = "y_string_uescaped_newline")]
        [DataRow("[\"\"]", DisplayName = "y_string_unescaped_char_delete")]
        [DataRow("[\"\\uA66D\"]", DisplayName = "y_string_unicode")]
        [DataRow("[\"⍂㈴⍂\"]", DisplayName = "y_string_unicode_2")]
        [DataRow("[\"\\u0022\"]", DisplayName = "y_string_unicode_escaped_double_quote")]
        [DataRow("[\"\\uDBFF\\uDFFE\"]", DisplayName = "y_string_unicode_U+10FFFE_nonchar")]
        [DataRow("[\"\\uD83F\\uDFFE\"]", DisplayName = "y_string_unicode_U+1FFFE_nonchar")]
        [DataRow("[\"\\u200B\"]", DisplayName = "y_string_unicode_U+200B_ZERO_WIDTH_SPACE")]
        [DataRow("[\"\\u2064\"]", DisplayName = "y_string_unicode_U+2064_invisible_plus")]
        [DataRow("[\"\\uFDD0\"]", DisplayName = "y_string_unicode_U+FDD0_nonchar")]
        [DataRow("[\"\\uFFFE\"]", DisplayName = "y_string_unicode_U+FFFE_nonchar")]
        [DataRow("[\"\\u005C\"]", DisplayName = "y_string_unicodeEscapedBackslash")]
        [DataRow("[\"€𝄞\"]", DisplayName = "y_string_utf8")]
        [DataRow("[\"aa\"]", DisplayName = "y_string_with_del_character")]
        [DataRow("false", DisplayName = "y_structure_lonely_false")]
        [DataRow("42", DisplayName = "y_structure_lonely_int")]
        [DataRow("-0.1", DisplayName = "y_structure_lonely_negative_real")]
        [DataRow("null", DisplayName = "y_structure_lonely_null")]
        [DataRow("\"asd\"", DisplayName = "y_structure_lonely_string")]
        [DataRow("true", DisplayName = "y_structure_lonely_true")]
        [DataRow("\"\"", DisplayName = "y_structure_string_empty")]
        [DataRow("[\"a\"]\n", DisplayName = "y_structure_trailing_newline")]
        [DataRow("[true]", DisplayName = "y_structure_true_in_array")]
        [DataRow(" [] ", DisplayName = "y_structure_whitespace_array")]
        public void TraverseJson(string source)
        {
            Traverse(JValue.Parse(source));

            static void Traverse(JValue json)
            {
                switch (json.Type)
                {
                    case JValue.TypeCode.Null:
                        break;
                    case JValue.TypeCode.Boolean:
                        json.ToBoolean();
                        break;
                    case JValue.TypeCode.Number:
                        json.ToNumber().ToDecimal();
                        break;
                    case JValue.TypeCode.String:
                        json.ToUnescapedString();
                        break;
                    case JValue.TypeCode.Array:
                        foreach (var element in json.Array())
                            Traverse(element);
                        break;
                    case JValue.TypeCode.Object:
                        foreach (var member in json.Object())
                        {
                            Traverse(member.Key);
                            Traverse(member.Value);
                        }
                        break;
                }
            }
        }
    }
}
